import React, { useState, useEffect } from "react";
import FileUpload from "./components/FileUpload.jsx";
import Result from "./pages/Result.jsx";

export default function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [darkMode]);

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col items-center justify-center p-6 text-gray-900 dark:text-gray-100">
      {/* Theme Toggle */}
      <button
        onClick={() => setDarkMode(!darkMode)}
        className="absolute top-4 right-4 px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg shadow hover:scale-105 transition"
      >
        {darkMode ? "üåô Dark" : "‚òÄÔ∏è Light"}
      </button>
      <h1 className="text-3xl font-bold mb-2">üìÑ Document Summary Assistant</h1>
      <p className="text-lg text-gray-600 dark:text-gray-300 text-center max-w-2xl mb-6">
        Upload your documents and instantly generate clear, concise summaries.  
        Switch between extracted text and AI-generated insights with ease.
      </p>

      <div className="w-full max-w-2xl">
        <FileUpload onResult={setData} setLoading={setLoading} />
        {loading && <p className="text-blue-500 mt-4">‚è≥ Processing your document...</p>}
        {data && <Result data={data} />}
      </div>
    </div>
  );
}






import React, { useState } from "react";
import { jsPDF } from "jspdf";

export default function Result({ data }) {
  const [tab, setTab] = useState("summary");

  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.text("AI Document Summary", 10, 10);
    doc.text(data.summary || "No summary", 10, 20);
    doc.save("summary.pdf");
  };

  return (
    <div className="mt-6">
      {/* Tab Switcher */}
      <div className="flex space-x-2 mb-4">
        <button
          onClick={() => setTab("summary")}
          className={`flex-1 py-2 rounded-lg ${tab === "summary" ? "bg-green-600 text-white" : "bg-gray-200"}`}
        >
          Summary
        </button>
        <button
          onClick={() => setTab("text")}
          className={`flex-1 py-2 rounded-lg ${tab === "text" ? "bg-green-600 text-white" : "bg-gray-200"}`}
        >
          Extracted Text
        </button>
      </div>

      {/* Tab Content */}
      <div className="bg-green-50 p-4 rounded-lg shadow-inner min-h-[200px]">
        {tab === "summary" ? (
          <p className="whitespace-pre-wrap text-gray-800">{data.summary}</p>
        ) : (
          <p className="whitespace-pre-wrap text-gray-700">{data.text}</p>
        )}
      </div>

      {/* Buttons */}
      {tab === "summary" && (
        <button
          onClick={downloadPDF}
          className="mt-4 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
        >
          ‚¨á Download Summary as PDF
        </button>
      )}
      <button
        onClick={() => window.location.reload()}
        className="mt-4 ml-3 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600"
      >
        üîÑ Start Again
      </button>
    </div>
  );
}


// import axios from 'axios';
// const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
// export default axios.create({ baseURL });


// import React, { useState } from "react";
// import { useDropzone } from "react-dropzone";
// import axios from "axios";

// export default function FileUpload({ onResult, setLoading }) {
//   const [length, setLength] = useState(1); // 0=short,1=medium,2=long
//   const { getRootProps, getInputProps, acceptedFiles } = useDropzone({ maxFiles: 1 });

//   const handleUpload = async () => {
//     if (!acceptedFiles.length) return alert("Please select a file");

//     const fd = new FormData();
//     fd.append("file", acceptedFiles[0]);
//     fd.append("length", ["short", "medium", "long"][length]);

//     setLoading(true);
//     try {
//       const { data } = await axios.post(
//         process.env.REACT_APP_API_URL + "/api/process",
//         fd,
//         { headers: { "Content-Type": "multipart/form-data" } }
//       );
//       onResult(data);
//     } catch (err) {
//       alert(err?.response?.data?.error || err.message);
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <div>
//       <div {...getRootProps()} className="border-2 border-dashed border-green-400 bg-green-50 p-10 text-center rounded-xl cursor-pointer hover:bg-green-100 transition">
//         <input {...getInputProps()} />
//         <p className="text-gray-500">Drag & drop a PDF or image here, or click to select</p>
//       </div>

//       {/* Slider control */}
//       <div className="mt-6 text-center">
//         <label className="block font-medium mb-2">Summary Length</label>
//         <input
//           type="range"
//           min="0"
//           max="2"
//           step="1"
//           value={length}
//           onChange={(e) => setLength(Number(e.target.value))}
//           className="w-2/3 accent-green-500"
//         />
//         <div className="flex justify-between w-2/3 mx-auto text-sm text-gray-600 mt-1">
//           <span>Short</span>
//           <span>Medium</span>
//           <span>Long</span>
//         </div>
//       </div>

//       <button
//         onClick={handleUpload}
//         className="w-full mt-6 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition"
//       >
//         Upload & Summarize
//       </button>
//     </div>
//   );
// }


// // server/server.js
// import express from "express";
// import cors from "cors";
// import dotenv from "dotenv";

// // Load environment variables
// dotenv.config({ override: true });

// const app = express();


// // Middleware
// app.use(cors());

// app.use(express.json());

// // Debug log to confirm key is loaded
// if (process.env.GEMINI_API_KEY) {
//   console.log("‚úÖ GEMINI_API_KEY:", process.env.GEMINI_API_KEY.slice(0, 10) + "...");
// } else {
//   console.warn("‚ö†Ô∏è GEMINI_API_KEY is missing in .env");
// }

// // Routes
// import fileRoutes from "./routes/fileroutes.js";
// app.use("/api", fileRoutes);

// // Start server
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//   console.log(`üöÄ Server running on port ${PORT}`);
// });
